# create method notes
    # Pass in from html
    # Post.create(params[:title], params[:url], params[:description])

    # Pass in from basic rails form
    # Post.create(title: params[:title], url: params[:url], description: 
    #   params[:description], user_id: 1)

    # e.g. title is a setter method from ActiveRecord pattern

    # Model-backed form, Rails 3
    # Post.create(params[:post]) #mass assignment because post is a hash
  
    # Mass assignment security - Rails 3 had attr_accessible in post.rb,
    # whitelist things, eventually you wind up whitelisting everything
    # post = Post.new(params[:post])
    # Rails 4, strong parameters


# Post params notes
    # best practices around strong params still emerging
    # non-permitted stuff gets wiped, source of silent bugs, blah, but important
    # to not let potential hackers know what's going on
    # params.require(:post).permit(:title, :url, :description, :creator)
    # params.require(:post).permit! # Allow everything
    #if user.admin?
    #  permit!
    #else
    #  permit (:title, :url, :description, :creator)

<!-- 
<h2>Write your new post here!</h2>

<h4>Pure HTML form - now broken because authenticity token required</h4>
<form action = '/posts' method = 'POST'>
  Title: <input type='text' name='title'>
  <br/>
  <input type = 'submit' class = 'btn btn-primary'>
</form> 
-->

<!--
<h4>Rails form helpers</h4>

<%= form_tag '/posts' do %>
  <%= label_tag :title, 'Input Title' %> --><!-- String for vision-impaired -->
  <!--
  <%= text_field_tag :title %> --><!-- This actally sets the param name -->
  <!--
  <br/>
  <%= label_tag :url, 'Input URL' %>
  <%= text_field_tag :url %>
  <br/>
  <%= label_tag :description, 'Input Description' %>
  <%= text_field_tag :description %>
  <br/>
  <%= submit_tag "Create Post", class: 'btn btn-primary' %>
<% end %>
-->      


<!-- single select dropdown
<%= select_tag "category_id", options_from_collection_for_select(Category.all, "id", "name"), :multiple = "multiple" %>
-->

      <!-- working checkboxes
<div class = 'control-group'>
<%= f.label "Categories:" %>
<% Category.all.each do |category| %>
  <%= label_tag :category, category.name, class: "checkbox inline" %>
  <%= check_box_tag 'post[category_ids][]', category.id, @post.category_ids.include?(category.id) %>
<% end %>
</div>
-->

<!-- single select dropdown
<%= select_tag "category_id", options_from_collection_for_select(Category.all, "id", "name"), :multiple = "multiple" %>
-->


<!-- HTML categories:
<select name = 'post[options][]', multiple = 'multiple'>
  <option value = '1'>option 1</option>
  <option value = '2'>option 2</option>
</select>
-->

<!-- working multi-dropdown mbf select
<%= f.collection_select(:category_ids, Category.all, :id, :name, {}, {:multiple => true, :id => 'category_select'}) %>
-->

<!-- working multi-checkbox mbf select (can't inline)
<%= f.collection_check_boxes(:category_ids, Category.all, :id, :name, {}, {:multiple => true, :id =>'category_select'}) %>
-->

<!-- inlined checkboxes, from the Tealeaf solutions
<%= f.collection_check_boxes :category_ids, Category.all, :id, :name, do |cb| %>
  <% cb.label(class: "checkbox inline") {cb.check_box(class: "checkbox") + cb.text} %>
<% end %>
-->

<div class="row">
  <p><%= link_to 'Submit a New Post', new_post_path %></p>
</div>