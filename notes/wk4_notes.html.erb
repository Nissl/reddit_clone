Rails AJAX

Good for when you only need a part of the page to change, particularly if expensive page that needs to hit a DB a lot. Our post index certainly qualifies. Facebook would be even more extreme. 

In blackjack, there was an application.js file, using jquery syntax. 

$(document).ready(function() {
  $('#hit_form input').click(function() {// 1. Unobtrusive JS event listener
    $.ajax({ // 2. Trigger AJAX request (following 3 lines, AJAX request - verb, url, params)
    type: 'POST'
    url: '/player/hit'
    data: {param1: "hi", param2: "there"}
    }).done(function(msg) { // 3. Handle the response - here we replace #some_element
      $('#some_element').html(msg);
    });
  });
});

Click event listener. Hijack button functionality, issue AJAX asyncrhonous request, controller gives response. jQuery sits on top of Javascript, which has a lot of quirks. Used to be a huge headache, particularly due to IE. jQuery abstracts away all that junk with its own massive set of if/else statements dealing with browser incompatibility.

Unobtrusive JS manipulates the DOM. This code gets used in pretty much any framework, Python, PHP, Java. 

You can see how this might eventually get quite messy if you do a lot. Lots of solutions, like extracting out to objects or using a MVC on the frontend, like angular/ember/backbone. OR Rails helps you hide a little of this stuff. 

Ok, how does Rails do the above example? In our index page, we're AJAXifying the vote links. 

Go to post partial in rails, add remote: true to do line
Look at html: adds data-remote="true", converts link into AJAX call very systematically, similar to data_method. That takes care of lines 1 & 2 in the above example.

Need to handle differently, though. Right now we're just redirect_to :back

Now we do:

respond_to do |format|
  # html method takes a block just fine
  format.html { redirect_to :back, notice: "Your vote was counted" }
  format.js 
end

Tries to render views/posts/vote.js.erb
try making one with code alert('hi!');
could say alert('total votes for <%= @post.title %> is <%= @post.total_votes %>')

Works, but didn't change the UI - but you obviously have all the info you need to do that. What you want to do is update the number on the actual page. Need some way to get at that number.

<span id='post_<%=post.id%>_votes'><%= @post.total_votes %></span>

try in chrome console:
$('#post_1_votes').html('hi there')

So, in your vote.js.erb file

$('#post_<%= @post.id %>_votes').html('<%= @post.total_votes%>')

now add remote: true to the downvote as well. Coo.
This approach is bad for something like GMail or Google maps (or my twitter/reddit site), but works great for simple page apps (like my live music & YT aggregator). So it's a bit controversial, particularly as there's a push to build more "desktop-quality" web apps.

Lecture 7 pt. 2: slugging and other minor topics (admin role, timezones)
Slugging: use a unique ID for resources that's not our IDs. posts/post_title or categories/category_title, users/user_title etc. 

Here, we're just going to do posts. We (students) have 3 to do - posts, categories, users.
Benefits: SEO - get credit in URL, security - people can guess info about your data by playing with your urls, and just in general showing primary key ideas is a poor idea.

Ok, how do we change post_path(post) to use some kind of slug? Using object post, calling a method behind the scenes that returns the id. The method that is called is post.to_param

Declare instance method called to_param (model level)
def to_param
  self.slug
end

rails generate migration add_slug_to_posts

def change
  add_column :posts, :slug, :string
end

rake db:migrate

Need to populate column now. 

Possible?
def generate_slug
  self.slug = self.title
end

IRB
str = "My First Post"
str.gsub(' ', '')
str.gsub(' ', '-').downcase

Now's the time to play with regex... bleah.
rubular.com test regex

regex: any non-alphanumeric characters, replace with dash
.sub(to_be_replaced, replace) - first only
.gsub(to_be_replaced, replace) - all replaced
use regex in place of to_be_replaced

we're just going to do 
str.gsub(' ', '-').downcase

self.slug = self.title.gsub(' ', '-').downcase
self.save

wait! don't just save, add to ActiveRecord callbacks - allows us to do something within the lifecycle of an ActiveRecord object

after_save :generate_slug #wait, this will screw up bookmarks if title changes.
#also, will still need self.save, which will trigger a loop.

after_validation :generate_slug #still executes for updates
before_save #ditto

right now, none of the current data has slugs

rails console
Post.all.each {|post| post.save}

Be *very* careful about doing this in production. Very, very careful. If you have a ton of data, you probably want to create a migration to do this. Put a maintenance page up, can revert, etc.

Now we need to fix the controller because we just overwrote to_param
@post = Post.find_by(slug: params[:id])

--
Simple Admin role
Define a set of roles, with a set of permissions.
When a user goes to do something, you need a way to check permissions. Cumbersome to build, slow, never a positive return on application unless managing permissions is a core piece. Lots of clients like it, though. Try to convince client to back away for something simple. 

Good compromise? Rails apps are typically pretty simple. Have a role column on users. Takes a string. 

rails generate migration add_role_to_users.rb

def change
  add_column :users, :role, :string
end

rake db: migrate

class User
  def admin?
    self.role == 'admin'
  end

  self.role.to_s.to_sym = :admin

  def moderator?
    self.role == 'moderator'
  end
end

Let's say only admins can create categories. 

class CategoriesController
  before_action :require_user
  before_action :require_admin

class ApplicationController
  def require_admin
    access_denied unless logged_in? and current_user.admin?
  end

  def access_denied
    flash[:error] = "You can't do that"
    redirect_to root_path 
  end
end

--
Time Zones yay

Add a %Z to our helper to display timezone. 
uncomment config.time_zone in application.rb

see time zomes: rake -T | grep time
rake time:zones:all

rake time:zones:all | grep US

rails now autoconverts

But users want to set their own timezone!

rails generate migration add_time_zone_to_users

def change
  add_column :users, :time_zone, :string
end

rake db:migrate

user, _form
<div class='control-group'>
 <%= f.label :time_zone %>
 <%= f.time_zone_select :time_zone, ActiveSupport::TimeZone.us_zones %> <!-- new to rails 4 check documentation for more options-->
</div>

def user_params
  params.require(:user).permit(:time_zone)
end

now what?

def fix_time(str)
  if logged_in? && !current_user.time_zone.blank?
    str = str.in_time_zone(current_user.time_zone)
  end
  str.strftime(%formatting code)
end

--
Again, explanation of data-remote from solutions:
Basically - sends in as jquery-ajax - all of that is extracted to Rails. Both this and data-method - JS that are baked into rails. These two actually work together. Transformed by built-in JS into form, and then ajax request. Data-method uses JS to put a form around things with a specified method (right?)  

JS Notes:
//Another way to do the "else" error function:
//Put the code in .html into the view, with style="display-hidden"
//Code here:
//$('#post_vote_error_<%=post.slug%>').show()

//post.slug or post.to_param will both work for all of this stuff.

//alert('hi!')
//alert('Total votes for <%= @post.title %> is <%= @post.total_votes %>')

Lecture 8 - final lecture of the course

Voteable validations, exposing APIs, extracting common logic from model, creating & publishing gems

Voteable validations

(review)

Exposing APIs

In general... don't do this yet! Learn to build Rails first. 

Browser gets to posts#show via GET '/posts/:slug'

But there are other ways to get there, though. 

localhost:3000/posts/:slug.js

def show
  respond_to do |format|
    format.html # Render template. Good enough.
    format.json do 
      render json: @post #calls @post.to_json - parses data, builds object
    end
    format.xml { render xml: @post}
  end
end

Why? Apps talk to each other. Look at Twilio API. Here's how applications interface. 

curl is the same as HTTP client

You rarely want to give out pure information like this about your data. How do we perform Twilio authentication? Secret token. Can use that to talk to Twilio. 

Can also do before_action :verify_api_token

Anyway... more advanced, don't worry about exposing, worry about consuming APIs first.

Best practices: API versioning is a huge deal. Don't just change your API. Twilio versions by having a date in the URL. Old apps still go to the same route. 

No exercises for that...

Part 2.
We're concerned about the redundancies at the model layer.

Redundant code in post and comment models, particularly the voting calcs. Could have many more parents (e.g., Facebook you can like a lot of stuff!) 

Natural to make a module and then include module

Go to application.rb file. 
config.autoload_paths += %W(#{config.root}/lib)

lib/voteable.rb

module Voteable #must match .rb name
  extend ActiveSupport::Concern #new to Rails 4 - abstracts away common metaprogramming - allows ClassMethods easily, adds included hook req. ActiveSupport gem, which is part of rails

  included do
    has_many :votes, as: :voteable
  end

  def total_votes
  end

  def up_votes

  def down_votes

  (module ClassMethods) - don't have any, so delete 
end

class Post
  include Voteable
  ...
end

*restart server due to application.rb modification*

class Comment
  include Voteable
  ...
end

remove has_many :votes, as: :voteable from posts and comments.

Now... what if you want it on another project? Time to make a gem! 
Publish to ruby-gems.org and then yank to keep namespace clean.

gem list gem
need a gem called gemcutter
quit out of rails project, cd
mkdir voteable-gem
cd voteable-gem
new file: voteable.gemspec

Gem::Specification.new do |s|
  s.name = "voteable_chris_oct"
  s.version = "0.0.0"
  s.date = "2013-10-23"
  s.summary = "A voting gem"
  s.description = "The best voting gem in the history of the universe"
  s.authors = ['John Morgan']
  s.email = 'jtmorgan61@gmail.com'
  s.files = ['lib/voteable_chris_oct.rb']
  s.homepage = 'http://github.com'
end

make lib/voteable_chris_oct.rb

module VoteableChrisOct
  (Voteable module code here)
end

in directory: $gem build voteable.gemspec

$gem push voteable_chris_oct-0.0.0.gem

$gem list -r voteable_chris

clean out voteable module

gemfile:
gem voteable-chris-oct

$bundle install --without production

go back to application.rb
require 'voteable_chris_oct' #avail app-wide

class Post
include VoteableChrisOct

what if just publishing locally?
gem 'voteable_chris_oct', path: '/Users/Chris/etc'

run bundle again

$gem yank voteable_chris_oct -v '0.0.0'

module ClassMethods
  def my_class_method
    puts "this is a class method!"
  end
end

will also extract slug gen code to module... but slightly class dependent
a bit of metaprogramming... will give solutions

next steps: course 3!
Course 3 is a lot more, and a lot more aggressive. 60%+ content, 10 weeks
Lots of people will be going full time here
If not taking course 3:
- Books
  Next:
  - Eloquent Ruby by Russ Olsen - best practices, syntax
  - Everday Testing with Rspec - beginner friendly
  
  Intermediate:
  - Rspec Book (pragmatic programmers) - long and thick and meaty

  Advanced:
  - PODOR - practical object-oriented design in Ruby (Sandi Metz)
  - Design Patterns in Ruby by Russ Olsen

What about learning JS? If the focus is Rails, then know enough JS to understand when you read it, but you don't need to be an expert. The best way to get a job, or even build your own project, is to know one stack well, then surround with peripheral technologies.

